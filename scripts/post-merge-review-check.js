#!/usr/bin/env bun
// Scan latest CodeRabbit reviews and create a follow-up ticket if actionable items remain.
// Minimal implementation: parses coderabbit-reviews/latest-20.json.

import { readFileSync, existsSync } from "node:fs";
import { join } from "node:path";

const REVIEWS_PATH = join("coderabbit-reviews", "latest-20.json");
if (!existsSync(REVIEWS_PATH)) {
  console.log("‚ÑπÔ∏è  No CodeRabbit review file ‚Äì skipping check.");
  process.exit(0);
}

let reviews;
try {
  reviews = JSON.parse(readFileSync(REVIEWS_PATH, "utf8"));
} catch (err) {
  console.error("‚ùå Failed to parse CodeRabbit review JSON:", err.message);
  process.exit(1);
}

let totalFindings = 0;
const details = [];

for (const item of reviews) {
  if (item.type !== "review" || !item.body) continue;
  const m = item.body.match(/Actionable comments posted:\s*(\d+)/i);
  if (m && Number(m[1]) > 0) {
    const count = Number(m[1]);
    totalFindings += count;
    details.push({ pr: item.pr, title: item.pr_title, count, url: item.html_url });
  }
}

if (totalFindings === 0) {
  console.log("‚úÖ No unresolved CodeRabbit findings.");
  process.exit(0);
}

console.log(`üî¥ ${totalFindings} unresolved CodeRabbit findings detected across ${details.length} PR(s).`);

function makeId() {
  const d = new Date();
  const date = d.toISOString().slice(0, 10); // YYYY-MM-DD
  const rand = Math.random().toString(36).slice(2, 8);
  return `TASK-${date}-${rand}`;
}

const ticket = {
  id: makeId(),
  type: "task",
  title: `Resolve ${totalFindings} CodeRabbit findings`,
  slug: `coderabbit-${Date.now().toString(36)}`,
  tags: ["coderabbit", "autogenerated"],
  artifacts: details,
};

const API_URL = "http://localhost:3001/api/tickets";

try {
  const res = await fetch(API_URL, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(ticket),
  });
  if (!res.ok) {
    const errText = await res.text();
    throw new Error(`${res.status} ${res.statusText}: ${errText}`);
  }
  const json = await res.json();
  console.log("‚úÖ Ticket created:", json.id || json);
} catch (err) {
  console.warn("‚ö†Ô∏è  Could not create ticket (API offline?) ‚Äì printing payload\n", JSON.stringify(ticket, null, 2));
  console.warn("   Error:", err.message);
} 