---
description: 
globs: packages/entities/src/**
alwaysApply: false
---

# Entity Best Practices

All game entities, especially enemies, must follow these strict standards to integrate correctly with the Vibe game engine. Adhering to these rules prevents common integration bugs and ensures architectural consistency.

## 1. Mandatory Constructor Signature

All `BaseEnemy` subclasses **must** use the following constructor signature for consistent dependency injection:

```javascript
constructor(x, y, type, config, p, audio) {
  super(x, y, type, config, p, audio);
  // ...
}
```
- **Rationale:** The `EnemyFactory` and `SpawnSystem` rely on this exact signature to create and initialize enemies. Omitting any parameter will cause runtime errors.

## 2. Extend `BaseEnemy`

All enemy types must extend the `BaseEnemy` class, which provides core functionality like health, movement, and state management.

## 3. Frame-Rate Independent Updates

All `update` methods and their sub-methods (e.g., `updateBehavior`) **must** accept `deltaTimeMs` as a parameter to ensure all game logic is independent of the frame rate.

```javascript
update(player, deltaTimeMs) {
  // Use deltaTimeMs for all time-based calculations
  const moveSpeed = this.speed * (deltaTimeMs / 16.6667); // Normalize to 60fps
}
```

## 4. Structured Attack Returns

Methods that perform attacks **must** return a structured object on success or `null` on failure/no-action. Do not return simple booleans.

- **✅ Correct:** `return { type: 'melee', playerHit: true, damage: 25, x: this.x, y: this.y };`
- **❌ Incorrect:** `return true;`
- **Rationale:** The `GameLoop` and `CollisionSystem` use the structured data to process damage, apply effects, and generate logs.

## 5. Event-Driven Visual Effects (VFX)

Entities **must not** call the `visualEffects` manager directly. Instead, they must emit events via the `EnemyEventBus`.

```javascript
// ✅ Correct:
this.eventBus.emit('enemy-death', { x: this.x, y: this.y, type: this.type });

// ❌ Incorrect:
window.visualEffects.createExplosion(this.x, this.y);
```
- **Rationale:** This decouples game logic from visual representation, allowing VFX to be managed, profiled, and modified centrally by the `VFXDispatcher`.

## 6. Math Imports

Always import math functions from `mathUtils.js`. Do not use the global `p5.js` math functions to ensure consistency and testability.

- **✅ Correct:** `import { sin, cos, random } from '../core/src/mathUtils.js';`
- **❌ Incorrect:** `let angle = p.atan2(...)` or `let r = random(...)`
