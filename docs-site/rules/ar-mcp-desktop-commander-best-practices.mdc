---
description: MCP Desktop Commander Best Practices
globs: 
alwaysApply: false
---
# MCP Desktop Commander Best Practices

This rule provides authoritative best practices for using the MCP Desktop Commander tools for file, directory, codebase, and system-level operations in the Vibe project.

---

## 1. Always Use Absolute Windows Paths
- All MCP Desktop Commander tools require absolute Windows paths (e.g., `D:\projects\vibe\...`).
- Avoid relative or Unix-style paths to prevent errors.

## 2. Use Dry-Run for Edits
- When editing files, always use the `dryRun: true` option first to preview changes.
- Only apply real edits (`dryRun: false`) if the diff matches expectations.
- This prevents accidental data loss or corruption.

## 3. Batch and Parallel Operations
- For efficiency, use batch or parallel tool calls when working with multiple files or directories.
- Example: Reading metadata for several files at once.

## 4. Always Verify Results
- After any move, edit, or delete operation, fetch file info or read back the file to confirm success.
- This ensures workspace integrity and prevents silent failures.

## 5. Clean Up Test Artifacts
- Remove or archive test files and directories after testing or automation runs.
- Keep the workspace clean and organized.

## 6. Error Handling and Troubleshooting
- If a tool fails, check for:
  - Path typos
  - Permissions issues
  - File locks or in-use files
- Retry the operation or escalate if the problem persists.

## 7. Combine Tools for Automation
- Chain directory, file, and search operations for powerful scripting and automation workflows.
- Example: Search, edit, and move files in a single automated script.

## 8. Use for Scripting, Refactoring, and Auditing
- MCP Desktop Commander tools are ideal for codebase-wide changes, audits, and automated workflows.
- Prefer these tools for large-scale or repetitive tasks.

## 9. Safety and Reversibility
- Always ensure you can revert changes (e.g., by making a backup or using version control).
- For critical files, back up before editing.

---

## 10. System-Level Tools: Processes, Sessions, and More

### Process Management
- **List Processes:** Use to audit running processes, debug stuck jobs, or monitor system health.
- **Kill Process:** Use with extreme caution. Only terminate processes you are certain are safe to kill (e.g., hung dev servers, runaway scripts). Never kill system or unknown processes.
- **Best Practice:** Always double-check the PID and command before issuing a kill. Prefer graceful shutdowns when possible.

### Terminal Session Management
- **List Sessions:** Use to view active MCP-initiated terminal sessions (e.g., background jobs, long-running scripts).
- **Force Terminate Session:** Use only if a session is stuck or unresponsive. Prefer to let jobs finish naturally.

### General System Tools
- **Get File/Directory Info:** Use to audit file metadata, permissions, and structure.
- **List Directory:** Use for navigation, scripting, and automation.
- **Search Code/Files:** Use for deep codebase analysis, refactoring, and audits.

---

**Reference:** See [MCP_TOOLS_GUIDE.md](mdc:docs/MCP_TOOLS_GUIDE.md) for advanced usage, troubleshooting, and workflow examples.

## 11. ðŸ“š Practical Examples

Below are ready-to-use Cursor tool calls you can paste (or adapt) when interacting with the AI.  Replace `D:\projects\vibe\â€¦` with your actual path.

### Read 3 files at once
```jsonc
{
  "path": "mcp_desktop-commander_read_multiple_files",
  "args": {
    "paths": [
      "D:\\projects\\vibe\\packages\\core\\src\\config.js",
      "D:\\projects\\vibe\\packages\\game\\src\\GameLoop.js",
      "D:\\projects\\vibe\\README.md"
    ]
  }
}
```

### Safely edit a single line (dry-run first)
```jsonc
{
  "path": "mcp_desktop-commander_edit_block",
  "args": {
    "file_path": "D:\\projects\\vibe\\packages\\core\\src\\config.js",
    "old_string": "DEV_PORT = 5500",
    "new_string": "DEV_PORT = 5600",
    "expected_replacements": 1,
    "dryRun": true
  }
}
```
â†’ Verify diff, then rerun with `"dryRun": false`.

### Move screenshot artifacts to a ticket folder
```jsonc
{
  "path": "mcp_desktop-commander_move_file",
  "args": {
    "source": "D:\\projects\\vibe\\startup-failure.png",
    "destination": "D:\\projects\\vibe\\tests\\bug-reports\\2025-06-30T00-00-00-000Z_BUG-TEST\\startup-failure.png"
  }
}
```

### List running background sessions
```jsonc
{
  "path": "mcp_desktop-commander_list_sessions",
  "args": { "random_string": "list" }
}
```

### Kill a hung process by PID
```jsonc
{
  "path": "mcp_desktop-commander_kill_process",
  "args": { "pid": 12345 }
}
```



