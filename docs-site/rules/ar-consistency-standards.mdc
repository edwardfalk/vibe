---
description: Consistency Standards
globs: packages/**/*.js
alwaysApply: false
---
# Consistency Standards (Shared)

> Central source for rules duplicated across multiple files.  Update **here** first, then link elsewhere.
+_Last modified: 2025-06-24_

## Logging Emoji Map
🎮 Game state  | 🎵 Audio | 🗡️ Combat | 💥 Explosions | ⚠️ Errors | 🚀 Movement | 🎯 AI | 🛡️ Defense | 🏥 Health
+### Examples
+```js
+console.log('🎮 Game state changed:', newState);
+console.log('🎯 AI picked strategy:', strategy);
+console.log('🚀 Bullet velocity:', velocity);
+```

## Enemy Constructor Signature
```
constructor(x, y, type, config, p, audio)
```
All enemy subclasses _must_ call `super` with that exact signature.

## Method Timing & Returns
* All update / attack methods accept `deltaTimeMs`.
* Return `{ … }` structured objects or `null`, never bare booleans.

## p5.js Instance Mode
* Prefix every p5 call with `p.` or `this.p.`.
* Import math helpers from `mathUtils.js`.

### Static Guardrails (CI/Local)
- Run `bun run scan:consistency` to flag:
  - Unprefixed p5 calls (`fill(`, `ellipse(`, `push()`, ...)
  - Direct `Math.(cos|sin|atan2|sqrt|min|max)` calls in `packages/**`
- Narrow scans:
  - Instance only: `bun run scan:instance`
  - Math only: `bun run scan:math`

### Deterministic Randomness
- Use `setRandomSeed(seed)` from `@vibe/core` to stabilize probes and visual timing.
- `random()` respects the seed via a Mulberry32 PRNG; unset seed restores `Math.random`.

## Tier-1 Globals (canonical)
`window.gameState`, `window.audio`, `window.beatClock`, `window.player`

Only these may be accessed globally; everything else should be provided via dependency injection.

## File Size & Responsibility
* >500 LOC? Consider split.
* One primary responsibility per module.

## Git Hooks (Recommended)
- Pre-commit runs: lint, `scan:consistency`, and `validate:sounds`.
- Install locally:
  ```ps1
  bun run hooks:install
  ```

—  Link to this file from `.cursorrules`, architecture-and-standards, etc.
