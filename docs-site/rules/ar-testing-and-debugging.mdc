---
description: Testing & Debugging
globs: 
alwaysApply: false
---
# Testing & Debugging Rule
<!-- desc: Defines Playwright probe workflow, test orchestration, troubleshooting. -->

> Everything an AI (or human) needs to know to reproduce bugs, run probes, capture logs, and raise tickets.

## üß™ Automated Testing

| Tool | File / Command | Notes |
|------|----------------|-------|
| MCP Playwright probes | e.g. [audio-system-probe.js](mdc:packages/tooling/src/probes/audio-system-probe.js) | Probes live under `packages/tooling/src/probes/` and use the MCP Playwright API client. |
| Run all probes | `bun run test` | Starts dev server on port **5500**, launches probes against `http://localhost:5500`. |
| Run all probes | `bun run test:orchestrated` | Starts Five Server, waits for READY, then launches Playwright + MCP probes (no local Ticket API). |
| Dev server | `bun run dev:start` | Idempotent start of Five-Server with robust port management. |

### Probe Principles
1. **Probe-driven only** ‚Äì No `*.spec.js` manual tests.  
2. Press canvas at `(400,300)` via Playwright to enable audio context.  
3. Restart game from game-over if needed (`window.gameState.restart()`).  
4. Use Test-Mode (`T` key) for deterministic movement/shooting.  
5. For fully deterministic runs, call `setRandomSeed(12345)` via page `evaluate` before starting gameplay.
5. Capture screenshot + console logs on failure, then *retry once*; if it still fails, auto-file a ticket.

### Running a Single Probe
```bash
bun run probe audio-system-probe.js --headless
```

### Deterministic Setup Snippet
```js
await page.evaluate(() => {
  import('@vibe/core').then(({ setRandomSeed }) => setRandomSeed(1337));
});
```
The helper script sets up the MCP Playwright client, so no config file required.

## üêû Bug Ticket Workflow

1. Probe (or human) detects an issue.  
2. Use `packages/tooling/src/githubIssueManager.js` to create GitHub Issues for failures (legacy JSON tickets are retired).
3. Artifacts (screens, `.debug` snippet) are captured by probes and attached to GitHub Issues via `packages/tooling/src/githubIssueManager.js`.  
4. Fix the bug ‚Üí run probes again ‚Üí close ticket via API or ticketManager.js.
> Legacy JSON tickets are retired. Use GitHub Issues only.

## üìÉ Logging & Debugging Aids

| Source | Where it lands | How to view |
|--------|---------------|------------|
| In-game `console.log` (emoji prefixed) | `.debug/YYYY-MM-DD.log` | Open & filter (`warn`, `‚ö†Ô∏è`, etc.). |
| Remote browser console | `packages/tooling/src/RemoteConsoleLogger.js` | Optional remote logging endpoint (disabled by default). |
| p5 frame/time stats | Toggle via Test-Mode. |

### Adding Debug Logs
```js
console.log('üí• Explosion radius:', radius);
```
*Use emoji prefix for category* ‚Äì helps grep.

### Inspecting Logs Quickly
```bat
REM Show last 100 lines with warnings
powershell -NoProfile -Command "Get-Content .debug/2025-06-15.log -Tail 100 | Select-String '‚ö†Ô∏è'" 
```

## üîç Manual Debugging Session
1. `bun run dev:start` ‚Äì wait for READY banner.  
2. Open browser to printed URL, click canvas to enable audio.  
3. Use dev-tools console; logs mirror `.debug`.  
4. Press `T` to toggle Test-Mode (auto-play).  
5. Trigger suspected scenario; watch Network tab and BeatClock overlay.

## üõ†Ô∏è Common MCP Helpers
| Purpose | Call |
|---------|------|
| Read a big log chunk | `mcp_filesystem_read_file --path D:\projects\vibe\.debug\...` |
| Create screenshot during manual run | `mcp_playwright_screenshot` |
| Kill dev server on port | `bunx kill-port 5500` |

## ‚úÖ Definition of Done
* All probes green (`bun run test`).  
* All probes green (`bun run test:orchestrated`).  
* `bun run lint` passes (no new errors).  
* No warnings in latest `.debug` after a 2-minute play session.

### üö¶ Lint Gatekeeper (optional but recommended)
Add this extra safety net for future agents/CI:

1. **After every proposed code change**, the agent must run:
  ```bat
  bun run lint
  ```
2. If ESLint reports **any** new errors (exit code ‚â† 0), the agent must:
  ‚Ä¢ Abort committing the change.  
  ‚Ä¢ Either auto-fix (`bun run lint:fix`) or draft a separate fix plan before proceeding.
3. CI can enforce the same by adding a Git pre-push hook or GitHub Action step:
  ```yaml
  - name: Lint Gatekeeper
    run: bun run lint
  ```

The Debug-Doctor agent should treat a failed lint as a **blocking structural issue**, not a cosmetic one.

* Playwright probes only; dev server on `http://localhost:5500`.
* Auto-generated probe contract files live under `ar-probe_*`‚Äîconsult them for per-probe expectations.

## 2025-06 Update: Path Consistency & Probe Location

### Standard INDEX_PAGE constant
- A new constant `INDEX_PAGE` is exported from [tests/playwright.setup.js](mdc:tests/playwright.setup.js).
- All Playwright specs **must** import it (`import { INDEX_PAGE } from './playwright.setup.js';`) and navigate via `await page.goto(INDEX_PAGE);`.
- `INDEX_PAGE` currently resolves to `/public/index.html`, mirroring Five-Server's `--root .` setting.
- This eliminates hard-coded `/index.html` strings that broke when serving the game under a sub-path.

### Probe Imports are Relative / Import-map Paths
- Browser-side probes under `packages/tooling/src/probes/` no longer use absolute `/packages/...` URLs.
- Instead they import TicketManager with:
  ```js
  await import(new URL('../ticketManager.js', import.meta.url).href);
  ```
  or via the import-map alias `@vibe/tooling/...` when called from tests.
- Tests that dynamically import probes should prefer the `@vibe/*` alias to stay path-agnostic.

### Action Points
1. When adding **new tests**, always use `INDEX_PAGE` for navigation.
2. When adding **new probes**, place them in `packages/tooling/src/probes/` and avoid absolute URLs.
3. If you relocate `public/index.html`, update `INDEX_PAGE` in one place‚Äîtests remain unchanged.

