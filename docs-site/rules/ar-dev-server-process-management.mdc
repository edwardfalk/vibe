---
description: Dev Server Process Management
globs: 
alwaysApply: false
---
# Dev Server Process Management

<!-- desc: Child process tracking, cleanup, and orphan prevention in dev-server.js -->

## Overview
The `scripts/dev-server.js` implements robust child process management to prevent orphaned Five-Server processes that can cause port conflicts and resource leaks.

## Architecture

### Child Process Tracking
- All spawned processes are tracked in a `children` Set
- `spawnTracked()` wrapper function maintains references to ChildProcess objects
- Automatic cleanup on process exit removes dead references

### Signal Handling
- Registers handlers for `SIGINT`, `SIGTERM`, `SIGBREAK`, and `exit` events
- `cleanExit()` function terminates all tracked children before parent exit
- Platform-specific termination: `taskkill /T /F` on Windows, `SIGTERM` on Unix

### Cleanup Strategy
```javascript
function stop() {
  // 1. Prefer tracked children (fast, reliable)
  if (children.size) {
    cleanExit();
    console.log('üõë Servers stopped (tracked)');
    return;
  }
  
  // 2. Fallback to port sweep (for orphaned processes)
  let killed = false;
  if (freePort(DEV_PORT)) killed = true;
  if (freePort(API_PORT)) killed = true;
  if (killed) console.log('üõë Servers stopped (port sweep)');
  else console.log('‚ÑπÔ∏è No servers running');
}
```

## Commands

### Available Scripts
- `bun run dev:start` - Start Five-Server
- `bun run dev:stop` - Stop all tracked processes
- `bun run dev:restart` - Clean stop then start
- `bun run dev:status` - Show running processes and ports

### Process Flow
1. **Start**: Check for existing processes, spawn if needed, wait for health checks
2. **Stop**: Terminate tracked children first, fallback to port sweep
3. **Restart**: Stop then start with clean slate

## Benefits

### Before (Problems Fixed)
- ‚ùå Orphaned processes survive parent termination
- ‚ùå Port conflicts require manual `taskkill` or system restart
- ‚ùå Resource leaks accumulate over development sessions
- ‚ùå Unreliable restarts due to zombie processes

### After (Current Implementation)
- ‚úÖ Zero orphans - children die with parent
- ‚úÖ Instant restarts - no port sweep delays
- ‚úÖ Graceful cleanup on Ctrl-C or crashes
- ‚úÖ Reliable development workflow

## Troubleshooting

### Port Still Occupied
If ports remain occupied after `dev:stop`:
1. Check for processes not spawned by this script
2. Use `netstat -ano | findstr :5500` (cmd) to identify PIDs
3. Manual cleanup: `bunx kill-port 5500`

### Process Won't Terminate
On Windows, `taskkill /T /F` should force termination. If it fails:
- Process may be elevated (run as administrator)
- Antivirus software may be protecting the process
- Use Task Manager as last resort

### Health Check Failures
If servers spawn but health checks fail:
- Check [scripts/port-utils.js](mdc:scripts/port-utils.js) for `waitForHttp()` timeout settings
- Verify endpoint: `http://localhost:5500/index.html`
- Review server logs in terminal output

## Related Files
- [scripts/dev-server.js](mdc:scripts/dev-server.js) - Main implementation
- [scripts/port-utils.js](mdc:scripts/port-utils.js) - Port management utilities
- [packages/core/src/config.js](mdc:packages/core/src/config.js) - Port configuration
- [package.json](mdc:package.json) - Script definitions

## Best Practices
- Always use `bun run dev:stop` before system shutdown
- Monitor `children.size` in status output for tracking verification
- Use `dev:restart` instead of manual stop/start sequences
- Report persistent orphan processes as potential bugs in the tracking system

## 2025-06 Update: Port-Release Wait + Root Path Alignment

### Port Binding Race Fix
- New utility `[waitForPortFree](mdc:scripts/port-utils.js)` actively polls until an OS port is entirely released.
- `dev-server.js` now calls `await waitForPortFree(port)` immediately **after** `freePort()` before respawning Five-Server.
- Prevents intermittent `EADDRINUSE` errors on rapid `dev:restart` cycles.

### Consistent Server Root
- Five-Server is now launched with `--root .` (repository root) instead of `public/` to match the Playwright test web-server configuration.
- The health-check endpoint was updated to `http://localhost:<DEV_PORT>/public/index.html`.
- Ensures identical module resolution between dev runtime and test environments (e.g., `/packages/*` import maps).

> **Action:** If you maintain custom scripts that call Five-Server, update them to use the repo root for consistency.

## References
- [DEV_SERVER_WORKFLOW.md](mdc:docs/DEV_SERVER_WORKFLOW.md) ‚Äì Human-friendly quick-start & troubleshooting
- [ci-dev-server.yml](mdc:.github/workflows/ci-dev-server.yml) ‚Äì CI workflow that validates the server process management

