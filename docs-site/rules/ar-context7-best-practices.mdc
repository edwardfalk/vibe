---
description: Context7 MCP Best Practices for Documentation, Snippets, and Testing
globs: 
alwaysApply: false
---
# Context7 MCP Best Practices for Documentation, Snippets, and Testing

This rule defines best practices for using Context7 MCP tools to access public library documentation, code snippets, and to enhance testing workflows in the Vibe project.

---

## 1. Prefer Context7 for Public/Open-Source Libraries
- Always use Context7 MCP tools to fetch documentation, code snippets, and best practices for any major open-source library (e.g., p5.js, Tone.js, Pixi.js).
- Use the canonical library ID (e.g., `/processing/p5.js`) returned by Context7 for all further queries.

## 2. Topic-Focused Queries
- Specify a topic (e.g., "instance mode", "unit testing", "WebGL", "Mocha", "performance") to get focused, relevant results.
- Use topic filtering to surface best practices, advanced usage, and common pitfalls.

### Example Libraries & Topics for Vibe

| Area | Library (ID) | Useful Topics |
|------|--------------|---------------|
| Core rendering & math | `/processing/p5.js` | "instance mode", "off-screen buffers", "performance", "WebGL", "shaders", "pixel manipulation", "post-processing" |
| High-performance 2D renderer | `/pixijs/pixijs` | "sprite batching", "particle container", "filters" |
| Game physics | `/liabru/matter-js` | "collision detection", "broad-phase", "composite bodies" |
| Game audio & music | `/tonejs/tone.js` | "scheduling", "transport", "granular synthesis" |
| Browser automation tests | `/microsoft/playwright` | "canvas clicks", "keyboard events", "locator best practices" |
| Utility & data | `/lodash/lodash` | "chain", "immutability patterns" |

For a deeper explanation of how to use this table in practice (resolve-library-id ➜ get-library-docs ➜ cache), see [`always-context7-mcp-tools-integration.mdc`](mdc:.cursor/rules/always-context7-mcp-tools-integration.mdc).

## 3. Accelerate Onboarding and Refactoring
- Use Context7 to quickly get up to speed on unfamiliar libraries or to check for idiomatic usage and anti-patterns.
- Reference real-world code snippets and test patterns to guide refactoring and new feature development.

## 4. Enhance and Automate Testing
- Leverage Context7 to:
  - Find canonical test setups for libraries (e.g., p5.js instance mode test harnesses, Mocha/Chai patterns).
  - Discover edge-case and regression test examples from the open-source community.
  - Integrate best-practice test patterns into the Vibe project's Playwright and probe-driven test workflows.
- Use Context7 to compare your test coverage and style with industry standards.
- For Vibe's probe-driven Playwright workflow, see [MCP_PLAYWRIGHT_TESTING_GUIDE.md](mdc:docs/MCP_PLAYWRIGHT_TESTING_GUIDE.md).

## 5. Documentation and Code Quality
- Use Context7 to:
  - Surface up-to-date documentation and code comments for public APIs.
  - Reference style guides, naming conventions, and accessibility patterns.
  - Improve in-code documentation and JSDoc/YUIDoc blocks by referencing canonical examples.

## 6. Limitations and Local Code
- Do not use Context7 for proprietary or project-specific code—use local code search and documentation tools instead.
- For Vibe-specific modules, rely on [README.md](mdc:README.md), [PROJECT_VISION.md](mdc:docs/PROJECT_VISION.md), and local probe/test files.

## 7. Additional Use Cases
- **Competitive/Comparative Analysis:** Use Context7 to compare APIs, features, and best practices across similar libraries (e.g., p5.js vs. Pixi.js).
- **API Migration:** Reference migration guides, deprecation notes, and code snippets to assist in upgrading or switching libraries.
- **Security Best Practices:** Surface security recommendations, common vulnerabilities, and safe usage patterns for public libraries.
- **Cross-Library Patterns:** Identify reusable patterns, idioms, and architectural approaches that can be applied across multiple libraries or frameworks.
- **Community Trends:** Use Context7 to discover emerging trends, popular extensions, and community-recommended tools or plugins for a given library.

## 8. Local Cache Helper
- Whenever a new dependency is added to `package.json`, run the helper script:

```bat
bun run docs:cache-context7
```

This script calls Context7 to fetch docs/snippets (or creates a placeholder) and stores them in `.context7-cache/`.  AI assistants should look in that cache before re-fetching docs remotely.

## 9. AI Usage Checklist (MANDATORY)
When the AI encounters a library import it hasn't seen before, it **must**:
1. Resolve the library ID via `Context7 resolve-library-id` (unless already cached).
2. Fetch docs/snippets via `Context7 get-library-docs` **or** read the cached file.
3. Reference those docs when suggesting code, tests, or refactors.

---

**Reference:**
- [MCP_TOOLS_GUIDE.md](mdc:docs/MCP_TOOLS_GUIDE.md) for advanced MCP workflows
- [MCP_PLAYWRIGHT_TESTING_GUIDE.md](mdc:docs/MCP_PLAYWRIGHT_TESTING_GUIDE.md) for probe-driven Playwright testing
- [README.md](mdc:README.md) for the documentation map



