---
description: Event-bus VFX
globs: packages/fx/**,packages/entities/**
alwaysApply: false
---
# Event-Driven VFX System

All visual effects (VFX) in this project are handled through a decoupled, event-driven system. **Do not call VFX functions directly from game logic.**

## The Correct Workflow

1.  **Game Logic Detects an Event:** A system like `packages/game/src/GameLoop.js` or `CollisionSystem.js` determines something happened (e.g., an enemy was hit).
2.  **Dispatch a Global Event:** The logic dispatches a `CustomEvent` on the global `window` object. The event name should be one of the constants defined in [`packages/entities/src/EnemyEventBus.js`](mdc:packages/entities/src/EnemyEventBus.js).
3.  **VFXDispatcher Listens:** The [`packages/fx/src/VFXDispatcher.js`](mdc:packages/fx/src/VFXDispatcher.js) listens for these global events.
4.  **Effects are Triggered:** The `VFXDispatcher` catches the event and calls the appropriate methods on `VisualEffectsManager` (for particles) or `EffectsManager` (for screen shake/flash).

### Code Example: Triggering a Hit Effect

To create a visual effect for a hit, dispatch the `ENEMY_HIT` event:

```javascript
import { ENEMY_HIT } from '@vibe/entities'; // Or '@vibe/entities/EnemyEventBus.js'

window.dispatchEvent(
  new CustomEvent(ENEMY_HIT, {
    detail: {
      x: 100, // x-coordinate of the hit
      y: 200, // y-coordinate of the hit
      type: 'grunt', // type of entity hit
      damageSource: 'bullet' // what caused the hit
    }
  })
);
```

### System Architecture Diagram

```mermaid
graph TD;
    subgraph "Source of Event"
        A["Game Logic<br/>(e.g., GameLoop, CollisionSystem)"];
    end

    subgraph "Event Bus"
        B["window.dispatchEvent(new CustomEvent(...))"];
    end

    subgraph "Listeners & Effect Managers"
        C["VFXDispatcher"];
        D["VisualEffectsManager<br/>(Particles, Sparks, Debris)"];
        E["EffectsManager<br/>(Screen Shake, Flash)"];
    end

    A -- "1. Detects a gameplay event (e.g., a hit)" --> B;
    B -- "2. Fires a named event on the global 'window' object" --> C;
    C -- "3. Catches the event and calls the right systems" --> D;
    C -- " " --> E;
```

This architecture keeps the game logic clean and completely decoupled from the implementation details of the visual effects.

