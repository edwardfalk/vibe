---
description: 
globs: 
alwaysApply: true
---
# Long-Running Terminal Commands

<!-- desc: Prevents chat hangs by defining how the AI should launch and monitor commands that run indefinitely (dev servers, watchers, interactive debuggers, etc.). -->

> **Purpose:** Ensure the AI never blocks the conversation by spawning commands that keep running (e.g., Five-Server, Playwright headed/debug sessions).

## 1. Use `is_background: true`
When calling `run_terminal_cmd` for any command that is expected to run longer than a few seconds **and** does not exit on its own, always set:
```ts
{ command: 'bun run dev:start', is_background: true }
```
This detaches the process so the chat can continue immediately.

## 2. Prefer "Orchestrated" Scripts
Many scripts already wrap long-running services in a finite workflow:
* `bun run test:orchestrated` – starts dev servers, waits until READY, runs Playwright tests, then **stops** servers.
* `bun run dev:restart` – clean stop ➜ start ➜ returns.

Because these scripts terminate on their own, you may run them **without** `is_background`.

## 3. Poll or Inspect Background Jobs
To view output or status of a background job you started:
1. Use `mcp_desktop-commander_list_sessions` to list active sessions.
2. Fetch logs via `mcp_desktop-commander_read_output`.
3. Terminate with `mcp_desktop-commander_force_terminate` if needed.

## 4. Common Long-Running Commands
| Purpose | Command | Launch Advice |
|---------|---------|---------------|
| Dev servers | `bun run dev:start` | `is_background: true` |
| Individual Five-Server | `bunx five-server …` | `is_background: true` |
| Playwright headed/debug | `bunx playwright test --headed` or `--debug` | `is_background: true` |
| Watchers (lint, docsify, etc.) | `bun run docs:serve`, `bun run lint --watch` | `is_background: true` |

## 5. DOs & DON'Ts
* **✅ DO** use finite scripts (like *orchestrated* tests) when available.
* **✅ DO** stop background servers with `bun run dev:stop` after tests.
* **❌ DON'T** run infinite processes in the foreground – it stalls the chat until manually killed.
* **❌ DON'T** forget to clean up orphan ports; if you do, run `bun run dev:stop` or `bunx kill-port 5500 3001`.

## 6. Troubleshooting
* **Servers won't start:** Run `bun run dev:status` to see if a previous instance is still alive.
* **Port conflicts:** Use `scripts/port-utils.js` helpers or `kill-port` CLI.
* **No output after background launch:** Remember to read output via the session tools or check the OS terminal.

## Related Rules & Docs
* [ar-dev-server-process-management.mdc](mdc:.cursor/rules/ar-dev-server-process-management.mdc)
* [DEV_SERVER_WORKFLOW.md](mdc:docs/DEV_SERVER_WORKFLOW.md)
* [MCP Desktop Commander Best Practices](mdc:.cursor/rules/ar-mcp-desktop-commander-best-practices.mdc)

---
**Scope:** Applies to all terminal commands issued through Cursor's `run_terminal_cmd` tool. This rule is always applied.

