---
description: VIBE Architecture & Coding Standards
globs: 
alwaysApply: false
---
# Vibe Architecture & Coding Standards Rule

<!-- desc: Folder map, runtime skeleton, essential coding standards. -->

> Quick-reference for any AI agent touching the `vibe` repo.

## 📦 Folder Map

| Path | Purpose |
|------|---------|
| `js/` | NOT used at all any more. DELETED. |
| `packages/core` | Fundamental single-player services – audio, math, config, BeatClock, GameState. Key files: [ToneAudioFacade.js](mdc:packages/core/src/audio/ToneAudioFacade.js), [SoundIds.js](mdc:packages/core/src/audio/SoundIds.js). |
| `packages/systems` | Game-engine systems (camera, spawn, UI, collision, etc.). |
| `packages/entities` | Player & enemies (Player, BaseEnemy, Grunt, Rusher, Tank, Stabber …). |
| `packages/fx` | Pure visual helpers & particle effects. |
| `packages/tooling` | Dev helpers & probes. |
| `tests/bug-reports` | Probe artifacts (screens/logs). Ticketing is GitHub Issues – see [TICKETING_SYSTEM_GUIDE.md](mdc:docs/TICKETING_SYSTEM_GUIDE.md). |

## 🏗️ Runtime Skeleton
1. `packages/game/src/GameLoop.js` spins up p5, creates **Player**, drops Tier-1 globals (`window.audio`, `window.player`, `window.beatClock`, `window.gameState`).
2. **Event-bus**: Every time the Player is (re)created, code **must** dispatch
   ```js
   window.dispatchEvent(new CustomEvent('playerChanged', { detail: window.player }));
   ```
   Audio and other listeners subscribe to stay in sync.
3. Entities call `window.audio.playSound(SOUND.id, x?, y?)` and other systems each frame.

## 🔉 Audio Safety
* All legal SFX ids live once in [SoundIds.js](mdc:packages/core/src/audio/SoundIds.js) (`export const SOUND`).
* Matching config must exist in `Audio.sounds`.  
  Audio validates both maps at startup and **throws** if they diverge.
* Use `SOUND.id` constants everywhere – never raw strings.

## ✍️ Coding Standards (essentials)
* ES modules only.  
* One clear responsibility per file; split if >500 LOC.
* Import math from `mathUtils.js`; never p5 globals.
* Instance-mode p5: every p5 call prefixed with `p.` or `this.p.`.
* Constructor-inject dependencies; Tier-1 globals allowed only for audio, player, beatClock, gameState.
* Enemy constructor signature is fixed: `constructor(x, y, type, config, p, audio)`.
* All update/attack methods accept `deltaTimeMs` and return structured objects or `null`.
* Emoji-prefixed logs: 🎮, 🎵, 🗡️, 💥, ⚠️, 🚀, 🎯, 🛡️, 🏥.
* Lint/Format: must pass `bun run lint` (ESLint + Prettier).

_See [Consistency Standards](mdc:.cursor/rules/ar-consistency-standards.mdc) for the full normative list (logging emoji, constructor signatures, etc.)._

## 🧪 Testing & Tickets
* Playwright probes only; dev server on `http://localhost:5500`.
* Failing probe can auto-create GitHub Issues via `packages/tooling/src/githubIssueManager.js`.
* When the User is playing, the console logs are auto-saved to .debug/ When debugging:
    1. Check those logs for errors and warnings (the log is comprehensive and easily grows to several MB)
    2. Delete the old logs immediately after checking them and fixing the bugs. No point in having hundreds of MB in old logs. New ones will show up soon. 

## 💡 When Adding New Features
1. Create/assign a ticket JSON first.  
2. Add new modules under the correct `packages/` sub-folder.  
3. Follow the constructor-injection & logging rules.  
4. Update this rule + docs if architecture changes.

### 🌐 Global Access Hierarchy

| Tier | Allowed Globals | Typical Owner |
|------|-----------------|---------------|
| **1** | `window.audio`, `window.player`, `window.beatClock`, `window.gameState` | Core systems needing cross-module coordination |
| **2** | Injected globals (`p` instance, `cameraSystem`, specific systems) | Modules receiving dependencies via constructor/function params |
| **3** | _Forbidden_/temp globals | Anything else—create local vars or inject |

If in doubt, **inject** the dependency and avoid Tier-3 globals.

