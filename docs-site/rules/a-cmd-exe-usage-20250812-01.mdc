---
alwaysApply: true
description: Canonical standards and best practices for using cmd.exe in Vibe (Windows-native shell). PowerShell optional, bash/WSL disallowed.
---
# Windows cmd.exe Usage and Best Practices (Vibe Standard)

ID: RULE-20250812-01
Title: Enforce Windows cmd.exe usage and patterns
Context: Vibe is Windows-native with cmd.exe as the default shell. Bash and WSL commands can silently fail (e.g., `| cat`) and break automation. This rule consolidates correct cmd.exe syntax, safe patterns, and common equivalents.
Policy:
  - Use cmd.exe as default shell for all scripts, tasks, Playwright, and MCP process runs.
  - Prefer Windows-native tools (bun/bunx, where, findstr, type) over Unix commands (grep, cat, sed, rm).
  - Use Windows paths (\\) and `cd /d` when changing drives.
  - Chain commands with `&&` (and) or `||` (or). Do not use `;`.
  - Quote with double-quotes. Avoid single-quote semantics.
  - Use `%VAR%` expansion (or `setlocal enabledelayedexpansion` + `!VAR!` inside code blocks).
  - Redirect to `NUL` for quiet output; combine streams with `2>&1`.
  - Never pipe to non-existent Unix tools (e.g., `| cat`). Use `type` or `more`.
  - Prefer `.cmd` hooks and scripts; PowerShell is optional and must be explicitly invoked.
Enforcement: CI and scripts should fail on bashisms; reviewers flag `| cat`, `grep`, `rm`, `/`-style paths, or `;` chaining in PRs. 
Scope: All terminal commands, scripts, and CI tasks in Vibe.
Rationale: Ensures reliability on Windows, avoids silent failures, and aligns with `.cursorrules`.
Links: [mdc:.cursorrules], [mdc:package.json], [mdc:.cursor/rules/ar-windows-bun-usage.mdc]
Status: Active
Added: 2025-08-12

## Command patterns and equivalents

- Chaining
  - AND: `cmd1 && cmd2`
  - OR: `cmd1 || cmd2`
  - Grouping: `( cmd1 & cmd2 )` (use `&` for unguarded sequence inside a group)
- Change drive and dir
  - `cd /d D:\projects\vibe`
- Paths and quoting
  - Double-quote paths with spaces: `"C:\Program Files\..."`
  - Use backslashes `\\` not `/`.
- Environment variables
  - Read: `%USERPROFILE%`, `%APPDATA%`
  - Set: `set VAR=value` (current session); `setx VAR value` (persist)
  - In block scripts needing updated values in same block: `setlocal enabledelayedexpansion` and use `!VAR!`
- Redirection and silence
  - Discard STDOUT: `> NUL`
  - Discard STDERR: `2> NUL`
  - Discard both: `> NUL 2>&1`
- Process discovery
  - Find executables: `where bun`
  - Kill processes: `taskkill /F /IM node.exe` (or by PID: `/PID 1234`)
- HTTP checks
  - Quick status: `curl -s -o NUL -w "%{http_code}" http://localhost:5500/`
- File ops equivalents
  - Show file (cat): `type file.txt` (or `more file.txt`)
  - Copy: `copy source dest` (single files) / `xcopy` or `robocopy` for trees
  - Move/Rename: `move old new`
  - Remove file: `del /q file`
  - Remove dir tree: `rmdir /s /q dir`
  - Find text (grep): `findstr /i /n "pattern" path\*.js`
- Scripting & control
  - Comments: `REM` or `::`
  - If/Exist: `if exist file.txt ...`
  - For loops: `for /f "usebackq tokens=*" %%A in ("file.txt") do echo %%A`
  - Escape meta (e.g., `|`, `&`, `>`, `^`): prefix with caret `^` when needed
- Code pages (UTF-8 logs)
  - `chcp 65001` (when necessary to ensure UTF-8 output in CI)

## bun/bunx with cmd.exe

- Invoke directly: `bun run script` or `bunx tool args`
- Avoid bashisms like `&& \` line continuations; use `^` for cmd line wrapping:
  ````
  bunx playwright test ^
    --reporter=line ^
    --grep "probe"
  ````

## Playwright and dev server in cmd.exe

- Long-running commands should be backgrounded by the AI tool, not by shell constructs. Prefer orchestrated scripts that terminate.
- Orchestrated test workflow (terminates on its own):
  - `bun run test:orchestrated`
- Manual sequence (finite):
  - `bun run dev:start && bunx playwright test --reporter=line && bun run dev:stop`
- Never pipe to Unix commands (e.g., `| cat`).

## Anti-patterns to reject in reviews

- `| cat`, `grep`, `sed`, `rm -rf`, `ls`, `pwd`, `touch`, Unix `/c/...` or WSL paths.
- `;`-style command chaining.
- Single quotes assuming bash semantics.

## Quick snippets

- Quiet port check (Five-Server health):
  - `curl -s -o NUL -w "%{http_code}" http://localhost:5500/`
- Find node processes:
  - `tasklist | findstr /i node`
- Kill node by image name:
  - `taskkill /F /IM node.exe`
- Confirm bun install and path:
  - `where bun && bun --version`

## Notes

- PowerShell is supported but not default. If needed, invoke explicitly: `powershell -NoProfile -Command "..."`.
- For Git hooks/scripts, ship `.cmd` as canonical wrappers; other shells may forward to `.cmd`.

## CI (Windows + Bun example)

```yaml
name: vibe-ci
on: [push, pull_request]
jobs:
  build:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1
      - name: Install
        run: bun install
      - name: Lint & tests
        shell: cmd
        run: |
          bunx eslint . --ext .js
          bun run test:orchestrated
```
